{"version":3,"sources":["components/Node/index.js","services/board/index.js","services/algorithm/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","secondClass","icon","row","col","isStart","isEnd","isWall","handleDrop","handleMouseEnter","handleMousePressed","toggleMousePressed","className","id","onDragOver","e","stopPropagation","preventDefault","onDragEnter","onDrop","onMouseEnter","onMouseDown","onMouseUp","createNode","cssClass","distance","Infinity","isVisited","previousNode","updateGridWall","grid","sortNodesByDistance","unvisitedNodes","sort","a","b","updateUnvisitedNeighbors","node","collectUnvisitedNeighbors","forEach","neighborNode","neighbors","push","length","filter","neighbor","getNodes","allNodes","getNodesInPathOrder","currentNode","shortestPath","unshift","Main","useState","setGrid","isMousePressed","placeNode","setPlaceNode","startCoord","setStartCoord","endCoord","setEndCoord","useEffect","rows","cols","curRow","createInitialGrid","newGrid","updateStartAndEnd","animateShortestPath","i","setTimeout","document","getElementById","draggable","onDrag","map","key","onClick","visitedNodes","closestNode","shift","dijkstra","animateDijkstra","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAwDeA,G,MAnDF,SAACC,GAAW,IAYjBC,EACAC,EAXAC,EASAH,EATAG,IACAC,EAQAJ,EARAI,IACAC,EAOAL,EAPAK,QACAC,EAMAN,EANAM,MACAC,EAKAP,EALAO,OACAC,EAIAR,EAJAQ,WACAC,EAGAT,EAHAS,iBACAC,EAEAV,EAFAU,mBACAC,EACAX,EADAW,mBAmBJ,OAdIJ,IACAN,EAAc,QAGdI,IACAH,EAAO,kBAAC,IAAD,CAAgBU,UAAU,SACjCX,EAAc,SAGdK,IACAJ,EAAO,kBAAC,IAAD,CAAgBU,UAAU,SACjCX,EAAc,OAId,yBACIY,GAAE,eAAUV,EAAV,YAAiBC,GACnBQ,UAAS,eAAUX,GACnBa,WAAY,SAACC,GACTA,EAAEC,kBACFD,EAAEE,kBAENC,YAAa,SAACH,GACVA,EAAEC,mBAENG,OAAQ,kBAAMX,EAAWL,EAAKC,IAC9BgB,aAAc,kBAAMX,EAAiBN,EAAKC,IAC1CiB,YAAa,kBAAMX,EAAmBP,EAAKC,IAC3CkB,UAAW,kBAAMX,GAAmB,KAEnCT,KCtCPqB,EAAa,SAACnB,EAAKD,GAAN,MAAe,CAC9BqB,SAAU,GACVpB,MACAD,MACAsB,SAAUC,IACVpB,OAAO,EACPD,SAAS,EACTsB,WAAW,EACXpB,QAAQ,EACRqB,aAAc,OAGZC,EAAiB,SAACC,EAAM1B,EAAKD,GAE/B,OADA2B,EAAK3B,GAAKC,GAAV,QAA4B0B,EAAK3B,GAAKC,GAAV,OACrB0B,GCDLC,EAAsB,SAACC,GAC1B,OAAOA,EAAeC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAET,SAAWU,EAAEV,aAGjDW,EAA2B,SAACC,EAAMP,GACTQ,EAA0BD,EAAMP,GACxCS,SAAQ,SAAAC,GACvBA,EAAaf,SAAWY,EAAKZ,SAAW,EACxCe,EAAaZ,aAAeS,MAI9BC,EAA4B,SAACD,EAAMP,GACrC,IAAMW,EAAY,GACXrC,EAAYiC,EAAZjC,IAAKD,EAAOkC,EAAPlC,IAKZ,OAJIA,EAAM,GAAGsC,EAAUC,KAAKZ,EAAK3B,EAAM,GAAGC,IACtCD,EAAM2B,EAAKa,OAAS,GAAGF,EAAUC,KAAKZ,EAAK3B,EAAM,GAAGC,IACpDA,EAAM,GAAGqC,EAAUC,KAAKZ,EAAK3B,GAAKC,EAAM,IACxCA,EAAM0B,EAAK,GAAGa,OAAS,GAAGF,EAAUC,KAAKZ,EAAK3B,GAAKC,EAAM,IACtDqC,EAAUG,QAAO,SAAAC,GAAQ,OAAKA,EAASlB,cAG5CmB,EAAW,SAAChB,GACd,IAAMiB,EAAW,GAMjB,OALAjB,EAAKS,SAAQ,SAAApC,GACTA,EAAIoC,SAAQ,SAAAF,GACRU,EAASL,KAAKL,SAGfU,GAGLC,EAAsB,SAAtBA,EAAuBC,GAAoC,IAAvBC,EAAsB,uDAAP,GACrD,OAAoB,OAAhBD,GACAC,EAAaC,QAAQF,GACdD,EAAoBC,EAAYrB,aAAcsB,IAElDA,GCsEIE,G,MA5HF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACRvB,EADQ,KACFwB,EADE,OAE8BD,oBAAS,GAFvC,mBAERE,EAFQ,KAEQ5C,EAFR,OAGmB0C,mBAAS,IAH5B,mBAGRG,EAHQ,KAGGC,EAHH,OAIqBJ,mBAAS,IAJ9B,mBAIRK,EAJQ,KAIIC,EAJJ,OAKiBN,mBAAS,IAL1B,mBAKRO,EALQ,KAKEC,EALF,KAOfC,qBAAU,WACNR,EFhBkB,WAEtB,IAFiD,IAA1BS,EAAyB,uDAAlB,GAAIC,EAAc,uDAAP,GACnClC,EAAO,GACJ3B,EAAM,EAAGA,EAAM4D,EAAM5D,IAAO,CAEjC,IADA,IAAM8D,EAAS,GACN7D,EAAM,EAAGA,EAAM4D,EAAM5D,IAC1B6D,EAAOvB,KAAKnB,EAAWnB,EAAKD,IAEhC2B,EAAKY,KAAKuB,GAEd,OAAOnC,EEOKoC,MACT,IAEH,IAAM1D,EAAa,SAACL,EAAKC,GACrB,IAAM+D,EFSY,SAACrC,EAAM0B,EAAWrD,EAAKC,GAK7C,OAJA0B,EAAK3B,GAAKC,GAAKoD,IAAc1B,EAAK3B,GAAKC,GAAKoD,GAC3B,WAAbA,IACA1B,EAAK3B,GAAKC,GAAKqB,SAAW,GAEvBK,EEdasC,CAAkBtC,EAAM0B,EAAWrD,EAAKC,GACtC,YAAdoD,EACAG,EAAc,CAACxD,EAAKC,IAEpByD,EAAY,CAAC1D,EAAKC,IAEtBkD,EAAQa,IAGN1D,EAAmB,SAACN,EAAKC,GAC3B,GAAKmD,GACDG,IAAe,CAACvD,EAAKC,IACrBwD,IAAa,CAACzD,EAAKC,GAAvB,CACA,IAAM+D,EAAUtC,EAAeC,EAAM1B,EAAKD,GAC1CmD,EAAQa,KAGNzD,EAAqB,SAACP,EAAKC,GAC7B,GAAIsD,IAAe,CAACvD,EAAKC,IACrBwD,IAAa,CAACzD,EAAKC,GAAvB,CACA,IAAM+D,EAAUtC,EAAeC,EAAM1B,EAAKD,GAC1CQ,GAAmB,GACnB2C,EAAQa,KAkBNE,EAAsB,SAACnB,GACzB,IAD2C,IAAD,WACjCoB,GACLC,YAAW,WACT,IAAMlC,EAAOa,EAAaoB,GAC1BE,SAASC,eAAT,eAAgCpC,EAAKlC,IAArC,YAA4CkC,EAAKjC,MAAOQ,UAAY,4BACnE,GAAK0D,IAJHA,EAAI,EAAGA,EAAIpB,EAAaP,OAAQ2B,IAAM,EAAtCA,IAab,OACI,oCACE,yBAAK1D,UAAU,UACb,wBAAIA,UAAU,SAAd,kCAEF,yBAAKA,UAAU,eACX,6BACE,kEACA,wBAAI8D,WAAS,EAACC,OAAQ,kBAAMlB,EAAa,aAAa,kBAAC,IAAD,QAExD,6BACE,gEACA,wBAAIiB,WAAS,EAACC,OAAQ,kBAAMlB,EAAa,WAAW,kBAAC,IAAD,SAG1D,yBAAK7C,UAAU,SAETkB,EAAK8C,KAAI,SAACzE,EAAKmE,GACX,OACI,yBAAKO,IAAKP,GAENnE,EAAIyE,KAAI,SAACvC,GAAU,IACRlC,EAAoCkC,EAApClC,IAAKC,EAA+BiC,EAA/BjC,IAAKE,EAA0B+B,EAA1B/B,MAAOD,EAAmBgC,EAAnBhC,QAASE,EAAU8B,EAAV9B,OACjC,OACI,kBAAC,EAAD,CACIsE,IAAK1E,EAAM,IAAMC,EACjBA,IAAKA,EACLE,MAAOA,EACPD,QAASA,EACTE,OAAQA,EACRJ,IAAKA,EACLM,iBAAkBA,EAClBC,mBAAoBA,EACpBF,WAAYA,EACZG,mBAAoBA,YAUlD,yBAAKC,UAAU,QACb,4BACIA,UAAU,cACVkE,QApDc,WAAO,IAAD,EDrEnB,SAAChD,GAKd,IAJA,IAAMiD,EAAe,GAEjB/C,EAAiBc,EAAShB,GAEG,IAA1BE,EAAeW,QAAc,CAEhC,IAAMqC,GADNhD,EAAiBD,EAAoBC,IACFiD,QAEnC,IAAID,EAAYzE,OAAhB,CACA,GAAIyE,EAAYvD,WAAaC,IACzB,OAAOqD,EAMX,GAHAC,EAAYrD,WAAY,EACxBoD,EAAarC,KAAKsC,GAEdA,EAAY1E,MAEd,MAAO,CAAEyE,eAAc7B,aADFF,EAAoBgC,IAG3C5C,EAAyB4C,EAAalD,KCiDCoD,CAASpD,IAzB5B,SAACiD,EAAc7B,GACnC,IADqD,IAAD,WAC3CoB,GACL,GAAIA,IAAMS,EAAapC,OAIrB,OAHA4B,YAAW,WACTF,EAAoBnB,KACnB,GAAKoB,GACF,CAAN,UAEFC,YAAW,WACT,IAAMlC,EAAO0C,EAAaT,GAC1BE,SAASC,eAAT,eAAgCpC,EAAKlC,IAArC,YAA4CkC,EAAKjC,MAAOQ,UAAY,sBACnE,GAAK0D,IAVHA,EAAI,EAAGA,GAAKS,EAAapC,OAAQ2B,IAAK,CAAC,IAAD,IAAtCA,GAAsC,mCAyB/Ca,CAF4B,EACpBJ,aADoB,EACN7B,eAoDdkC,SAAgC,IAAtB1B,EAAWf,QAAoC,IAApBiB,EAASjB,QAHlD,8BC1GG0C,MARf,WACE,OACE,yBAAKzE,UAAU,OACb,kBAAC,EAAD,QCIc0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.447fa08a.chunk.js","sourcesContent":["import React from 'react';\nimport { GiRunningNinja, GiPodiumWinner } from 'react-icons/gi';\n\nimport \"./node.css\"\n\nconst Node = (props) => {\n    const {\n        row,\n        col,\n        isStart,\n        isEnd,\n        isWall,\n        handleDrop,\n        handleMouseEnter,\n        handleMousePressed,\n        toggleMousePressed,\n    } = props;\n    let secondClass;\n    let icon;\n\n    if (isWall) {\n        secondClass = \"wall\";\n    }\n\n    if (isStart) {\n        icon = <GiRunningNinja className=\"icon\" />;\n        secondClass = \"start\";\n    }\n\n    if (isEnd) {\n        icon = <GiPodiumWinner className=\"icon\" />\n        secondClass = \"end\";\n    }\n\n    return(\n        <div\n            id={`node-${row}-${col}`}\n            className={`node ${secondClass}`}\n            onDragOver={(e) => {\n                e.stopPropagation();\n                e.preventDefault();\n            }}\n            onDragEnter={(e) => {\n                e.stopPropagation();\n            }}\n            onDrop={() => handleDrop(row, col)}\n            onMouseEnter={() => handleMouseEnter(row, col)}\n            onMouseDown={() => handleMousePressed(row, col)}\n            onMouseUp={() => toggleMousePressed(false)}\n        >\n            {icon}\n        </div>\n    )\n}\n\n\nexport default Node;","const createInitialGrid = (rows = 20, cols = 50) => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n        const curRow = [];\n        for (let col = 0; col < cols; col++) {\n            curRow.push(createNode(col, row));\n        }\n        grid.push(curRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => ({\n    cssClass: \"\",\n    col,\n    row,\n    distance: Infinity,\n    isEnd: false,\n    isStart: false,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n})\n\nconst updateGridWall = (grid, col, row) => {\n    grid[row][col][\"isWall\"] = !grid[row][col][\"isWall\"];\n    return grid;\n}\n\nconst updateStartAndEnd = (grid, placeNode, row, col) => {\n    grid[row][col][placeNode] = !grid[row][col][placeNode];\n    if (placeNode == \"isStart\") {\n        grid[row][col].distance = 0; \n    }\n    return grid;\n}\n\nexport {\n    createInitialGrid,\n    updateGridWall,\n    updateStartAndEnd,\n}\n","const dijkstra = (grid) => {\n    const visitedNodes = [];\n\n    let unvisitedNodes = getNodes(grid);\n\n    while (unvisitedNodes.length !== 0) {\n        unvisitedNodes = sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n\n        if (closestNode.isWall) continue;\n        if (closestNode.distance === Infinity) {\n            return visitedNodes;\n        }\n        \n        closestNode.isVisited = true;\n        visitedNodes.push(closestNode);\n        \n        if (closestNode.isEnd) {\n          const shortestPath = getNodesInPathOrder(closestNode);\n          return { visitedNodes, shortestPath };\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nconst sortNodesByDistance = (unvisitedNodes) => {\n   return unvisitedNodes.sort((a, b) => a.distance - b.distance)\n}\n\nconst updateUnvisitedNeighbors = (node, grid) => {\n    const unvisitedNeighbors = collectUnvisitedNeighbors(node, grid);\n    unvisitedNeighbors.forEach(neighborNode => {\n        neighborNode.distance = node.distance + 1;\n        neighborNode.previousNode = node;\n    })\n}\n  \nconst collectUnvisitedNeighbors = (node, grid) => {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nconst getNodes = (grid) => {\n    const allNodes = [];\n    grid.forEach(row => {\n        row.forEach(node => {\n            allNodes.push(node);\n        })\n    })\n    return allNodes;\n}\n\nconst getNodesInPathOrder = (currentNode, shortestPath = []) => {\n    if (currentNode !== null) {\n        shortestPath.unshift(currentNode)\n        return getNodesInPathOrder(currentNode.previousNode, shortestPath)\n    }\n    return shortestPath\n}\n\nexport {\n    dijkstra,\n}","import React, { useState, useEffect } from 'react';\nimport Node from '../Node'\nimport { createInitialGrid, updateGridWall, updateStartAndEnd } from '../../services/board';\nimport { dijkstra } from '../../services/algorithm';\nimport { GiRunningNinja, GiPodiumWinner } from 'react-icons/gi';\n\nimport \"./main.css\"\n\nconst Main = () => {\n    const [grid, setGrid] = useState([]);\n    const [isMousePressed, toggleMousePressed] = useState(false);\n    const [placeNode, setPlaceNode] = useState(\"\")\n    const [startCoord, setStartCoord] = useState([])\n    const [endCoord, setEndCoord] = useState([])\n\n    useEffect(() => {\n        setGrid(createInitialGrid());\n    }, []);\n\n    const handleDrop = (row, col) => {\n        const newGrid = updateStartAndEnd(grid, placeNode, row, col);\n        if (placeNode === \"isStart\") {\n            setStartCoord([row, col]);\n        } else {\n            setEndCoord([row, col])\n        }\n        setGrid(newGrid);\n    }\n\n    const handleMouseEnter = (row, col) => {\n        if (!isMousePressed) return;\n        if (startCoord === [row, col]) return;\n        if (endCoord === [row, col]) return;\n        const newGrid = updateGridWall(grid, col, row);\n        setGrid(newGrid);\n    }\n\n    const handleMousePressed = (row, col) => {\n        if (startCoord === [row, col]) return;\n        if (endCoord === [row, col]) return;\n        const newGrid = updateGridWall(grid, col, row);\n        toggleMousePressed(true);\n        setGrid(newGrid);\n    }\n\n    const animateDijkstra = (visitedNodes, shortestPath) => {\n        for (let i = 0; i <= visitedNodes.length; i++) {\n            if (i === visitedNodes.length) {\n              setTimeout(() => {\n                animateShortestPath(shortestPath);\n              }, 10 * i);\n              return;\n            }\n            setTimeout(() => {\n              const node = visitedNodes[i];\n              document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n          }\n    };\n\n    const animateShortestPath = (shortestPath) => {\n        for (let i = 0; i < shortestPath.length; i++) {\n            setTimeout(() => {\n              const node = shortestPath[i];\n              document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    const visualizeDijkstra = () => {\n        const { visitedNodes, shortestPath } = dijkstra(grid);\n        animateDijkstra(visitedNodes, shortestPath);\n    }\n\n    return(\n        <>\n          <div className=\"header\">\n            <h1 className=\"title\">Dijkstra Algorithm Visualizer</h1>\n          </div>\n          <div className=\"iconDisplay\">\n              <div>\n                <h2>Please Drag Icon to Start Location</h2>\n                <h2 draggable onDrag={() => setPlaceNode(\"isStart\")} ><GiRunningNinja /></h2>\n              </div>\n              <div>\n                <h2>Please Drag Icon to End Location</h2>\n                <h2 draggable onDrag={() => setPlaceNode(\"isEnd\")} ><GiPodiumWinner /></h2>\n              </div>\n          </div>\n          <div className=\"board\">\n            {\n                grid.map((row, i) => {\n                    return (\n                        <div key={i}>\n                        {\n                            row.map((node) => {\n                                const {row, col, isEnd, isStart, isWall} = node;\n                                return (\n                                    <Node\n                                        key={row + '-' + col}\n                                        col={col}\n                                        isEnd={isEnd}\n                                        isStart={isStart}\n                                        isWall={isWall}\n                                        row={row}\n                                        handleMouseEnter={handleMouseEnter}\n                                        handleMousePressed={handleMousePressed}\n                                        handleDrop={handleDrop}\n                                        toggleMousePressed={toggleMousePressed}\n                                    />\n                                );\n                            })\n                        }\n                        </div>\n                    )\n                })\n            }\n          </div>\n          <div className=\"menu\">\n            <button\n                className=\"startButton\"\n                onClick={visualizeDijkstra}\n                disabled={startCoord.length === 0 && endCoord.length === 0}\n            >\n                Run Dijkstra Algorithm\n            </button>\n          </div>\n        </>\n    )\n}\n\n\nexport default Main;","import React from 'react';\nimport './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}